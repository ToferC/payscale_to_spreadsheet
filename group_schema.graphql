schema {
  query: QueryRoot
}

type Group {
  name: String!
  identifier: GroupID!
  url: String!
  payscales: [PayScale!]!
  dateScraped: NaiveDate!
  payscaleForLevel(level: Int!): PayScale
  payAtLevelAndStepBetweenDates(
    level: Int!
    step: Int!
    startDate: NaiveDate!
    endDate: NaiveDate!
  ): [PayPeriod!]
  payInForceForLevelAndStep(level: Int!, step: Int!): Int
  payOnDateForLevelAndStep(level: Int!, step: Int!, date: String!): Int
}

enum GroupID {
  CS
  CX
  DS
  LS
  EC
  EL
  FB
  FI
  FS
  AS
  CM
  CR
  IS
  PM
  WP
  HR
  RO
  DE
  OP
  PH
  PS
  VM
  AC
  AG
  BI
  CH
  FO
  PC
  FR
  LI
  PR
  SC
  DD
  EG
  GT
  PI
  PY
  TI
  TR
  UT
}

scalar NaiveDate

type PayPeriod {
  startDate: NaiveDate!
  endDate: NaiveDate!
  workHours: Float!
  workDays: Float!
  hourlyRate: Float!
  annualRate: Float!
  salary: Float
}

type PayScale {
  name: String!
  level: Int!
  steps: Int!
  ratesOfPay: [RateOfPay!]!
  currentRatesOfPay: RateOfPay!
  rateOfPaysForDate(date: String!): RateOfPay!
}

enum Period {
  ANNUAL
  WEEKLY
  DAILY
  HOURLY
}

type QueryRoot {
  groups: [Group!]!
  group(identifier: GroupID!): Group!
}

type RateOfPay {
  inForce: NaiveDate!
  salary(step: Int!, period: Period!): Float
}